// DecisionProcedure class implements a decision procedure 
// using dReach tool
//
// @author: Fedor Shmarov
// @e-mail: f.shmarov@ncl.ac.uk
#ifndef DECISIONPROCEDURE_H 
#define DECISIONPROCEDURE_H  

#include<capd/capdlib.h>
#include<capd/intervals/lib.h>
#include<string>
#include "Box.h"

using namespace std;

// DecisionProcedure class declaration
class DecisionProcedure
{
	private:

		// PDRH template of the problem
		vector<string> temp;

		// PDRH template of the inverted problem
		vector<string> temp_c;

		// Options
		double delta;

		// List of the auxiliary filenames
		vector<string> file_base;

		vector<string> params;

		// The method gets a name of the file as a parameter and returns
		// true  if the file exists and false otherwise
		bool file_exists(const char*);

	public:

		// Constructor of the class
		//
		// @param template of the problem,
		// template of the inverted problem,
		// settings used for the verification 		
		DecisionProcedure(vector<string>, vector<string>, vector<string>, double);
		
		// Default constructor of the class
		DecisionProcedure();

		// The method get a Box and a flag as input parameters and 
		// generates the DRH model for the problem if flag is true and 
		// creates a DRH model for the inverted problem is the flag is false.
		// The methods returns a full path to the generated DRH file.
		//
		// @param box from the domain of random variables, flag triggering
		// generation of the inverse model
		string generate_smt2(Box, bool);

		// The method gets a full path to the DRH model and a precision
		// which are then used to call dReach. The method returns true
		// if dReach returns "sat" and false if dReach returns "unsat".
		//
		// @param DRH filename, precision used by dReach for verifying
		// the model
		bool call_dreal(string);

		// The method returns the list of the auxiliary filenames
		vector<string> get_file_base();

		// The method removes all the auxiliary files generated by dReach 
		void remove_aux_files();

		// The method removes auxiliary file
		//
		// @param filename base
		void remove_aux_file(string);
		
		// The methods gets an arbitrary Box as an input parameter
		// and return 1 if the indicator function over this box equals 1,
		// -1 if indicator function equals to 0 and 0 if the box contains
		// both values where the indicator function takes both values
		//
		// @param box from the domain of random variables. 
		int evaluate(Box);
};
#endif 